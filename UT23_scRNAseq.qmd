---
title: "UT23_snRNAseq"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(Seurat)
library(patchwork)
library(hdf5r) #for reading in h5 files 
library(sctransform) #Dhivya recommends using sctransorm for data transformation 

```

**Reading in the Data**

A seurat object was created for each h5 file

```{r, echo=TRUE}
# Aged M. Vaccae Subjects
AM1_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/AM1_filtered_feature_bc_matrix.h5")
AM1_object <- CreateSeuratObject(counts = AM1_counts, min.features = 100, project="AM")

AM2_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/AM2_filtered_feature_bc_matrix.h5")
AM2_object <- CreateSeuratObject(counts = AM2_counts, min.features = 100, project="AM")

AM3_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/AM3_filtered_feature_bc_matrix.h5")
AM3_object <- CreateSeuratObject(counts = AM3_counts, min.features = 100, project="AM")

# Aged Vehicle Subjects 
AV1_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/AV1_filtered_feature_bc_matrix.h5")
AV1_object <- CreateSeuratObject(counts = AV1_counts, min.features = 100, project="AV")

AV2_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/AV2_filtered_feature_bc_matrix.h5")
AV2_object <- CreateSeuratObject(counts = AV2_counts, min.features = 100, project="AV")

AV3_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/AV3_filtered_feature_bc_matrix.h5")
AV3_object <- CreateSeuratObject(counts = AV3_counts, min.features = 100, project="AV")

# Young vehicle subjects
YV1_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/YV1_filtered_feature_bc_matrix.h5")
YV1_object <- CreateSeuratObject(counts = YV1_counts, min.features = 100, project="YV")

YV2_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/YV2_filtered_feature_bc_matrix.h5")
YV2_object <- CreateSeuratObject(counts = YV2_counts, min.features = 100, project="YV")

YV3_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/YV3_filtered_feature_bc_matrix.h5")
YV3_object <- CreateSeuratObject(counts = YV3_counts, min.features = 100, project="YV")

# Creating merged object 
ut23.combined<-merge(AM1_object, y=c(AM2_object, AM3_object, AV1_object, AV2_object, AV3_object, YV1_object, YV2_object, YV3_object), add.cell.ids = c("AM1","AM2","AM3","AV1","AV2","AV3","YV1","YV2","YV3"), project = "ut23",  merge.data = TRUE)
```

**Seurat Quality Control**

<https://github.com/hbctraining/scRNA-seq_online/blob/master/lessons/04_SC_quality_control.md>

```{r}
# Add number of genes per UMI for each cell to metadata
ut23.combined$log10GenesPerUMI <- log10(ut23.combined$nFeature_RNA) / log10(ut23.combined$nCount_RNA)

# Compute percent mito ratio
ut23.combined$mitoRatio <- PercentageFeatureSet(object = ut23.combined, pattern = "^Mt-")
ut23.combined$mitoRatio <- ut23.combined@meta.data$mitoRatio / 100

# Create metadata dataframe
metadata <- ut23.combined@meta.data

metadata <- metadata %>%
        dplyr::rename(sample = orig.ident,
                      nUMI = nCount_RNA,
                      nGene = nFeature_RNA)

# Add metadata back to Seurat object
ut23.combined@meta.data <- metadata

saveRDS(ut23.combined, file = "/stor/work/Fonken/UT23_snRNAseq/local_ut23/ut23.combined.Rds")
```

**Graphing Seurat Quality Control**

```{r}
# Visualize the number of cell counts per sample
  	ggplot(data = metadata, aes(x=sample, fill=sample)) + 
  	geom_bar() +
  	theme_classic() +
  	theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  	theme(plot.title = element_text(hjust=0.5, face="bold")) +
  	ggtitle("NCells")
  	
# Visualize the number UMIs/transcripts per cell
  	ggplot(data = metadata, aes(color=sample, x=nUMI, fill= sample)) + 
  	geom_density(alpha = 0.2) + 
  	scale_x_log10() + 
  	theme_classic() +
  	ylab("Cell density") +
  	geom_vline(xintercept = 500)
  	
# Visualize the distribution of genes detected per cell via histogram
  	ggplot(data = metadata, aes(color=sample, x=nGene, fill= sample)) + 
  	geom_density(alpha = 0.2) + 
  	theme_classic() +
  	scale_x_log10() + 
  	geom_vline(xintercept = 300)
  	
    #Here we see a bimodal distribution, maybe indicating the presence of different cell types 

# Visualize the distribution of genes detected per cell via boxplot
  	ggplot(data = metadata, aes(x=sample, y=log10(nGene), fill=sample)) + 
  	geom_boxplot() + 
  	theme_classic() +
  	theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  	theme(plot.title = element_text(hjust=0.5, face="bold")) +
  	ggtitle("NCells vs NGenes")
  	
# Visualize the correlation between genes detected and number of UMIs and determine whether strong presence of cells with low numbers of genes/UMIs
  	ggplot(data = metadata, aes(x=nUMI, y=nGene, color=mitoRatio)) + 
  	geom_point() + 
	scale_colour_gradient(low = "gray90", high = "black") +
  	stat_smooth(method=lm) +
  	scale_x_log10() + 
  	scale_y_log10() + 
  	theme_classic() +
  	geom_vline(xintercept = 500) +
  	geom_hline(yintercept = 250) +
  	facet_wrap(~sample)
  	
# Visualize the distribution of mitochondrial gene expression detected per cell
  	ggplot(data = metadata, aes(color=sample, x=mitoRatio, fill=sample)) + 
  	geom_density(alpha = 0.2) + 
  	scale_x_log10() + 
  	theme_classic() +
  	geom_vline(xintercept = 0.2)
  	
  	#We define poor quality samples for mitochondrial counts as cells which surpass the 0.2 mitochondrial ratio mark
  	
# Visualize the overall complexity of the gene expression by visualizing the genes detected per UMI
  	ggplot(data = metadata, aes(x=log10GenesPerUMI, color = sample, fill=sample)) +
  	geom_density(alpha = 0.2) +
  	theme_classic() +
  	geom_vline(xintercept = 0.8)
  	
  	
```

### Cell-level filtering

Now that we have visualized the various metrics, we can decide on the thresholds to apply which will result in the removal of low quality cells. Often the recommendations mentioned earlier are a rough guideline, and the specific experiment needs to inform the exact thresholds chosen. We will use the following thresholds:

-   nUMI \> 500

-   nGene \> 250

-   log10GenesPerUMI \> 0.8

-   mitoRatio \< 0.2

```{r}
# Optional: Read in the merged_filtered_seurat.RData file 
ut23.combined <- readRDS("/Volumes/Fonken/UT23_snRNAseq/local_ut23/ut23.combined.Rds")

#other file for when using the comp server 
ut23.combined <- readRDS("/stor/work/Fonken/UT23_snRNAseq/local_ut23/ut23.combined.Rds")

# Filter out low quality reads using selected thresholds - these will change with experiment
ut23.filtered <- subset(x = ut23.combined, 
                         subset= (nUMI >= 500) & 
                           (nGene >= 250) & 
                           (log10GenesPerUMI > 0.80) & 
                           (mitoRatio < 0.20))

# Gene level filtering

# Extract counts
counts <- GetAssayData(object = ut23.filtered, slot = "counts")

# Output a logical matrix specifying for each gene on whether or not there are more than zero counts per cell
nonzero <- counts > 0

# Sums all TRUE values and returns TRUE if more than 10 TRUE values per gene
keep_genes <- Matrix::rowSums(nonzero) >= 10

# Only keeping those genes expressed in more than 10 cells
filtered_counts <- counts[keep_genes, ]

# Reassign to filtered Seurat object
ut23.filtered <- CreateSeuratObject(filtered_counts, meta.data = ut23.filtered@meta.data)

saveRDS(ut23.filtered, file = "/stor/work/Fonken/UT23_snRNAseq/local_ut23/ut23.filtered.Rds")
```

**Data Normalization and Clustering**

[hbctraining](https://github.com/hbctraining/scRNA-seq_online/blob/master/lessons/06_SC_SCT_normalization.md)

```{r}
ut23.filtered <- readRDS("/stor/work/Fonken/UT23_snRNAseq/local_ut23/ut23.filtered.Rds")

# Split seurat object by condition to perform cell cycle scoring and SCT on all samples
split_seurat <- SplitObject(ut23.filtered, split.by = "sample")

options(future.globals.maxSize = 4000 * 1024^2)

for (i in 1:length(split_seurat)) {
    split_seurat[[i]] <- SCTransform(split_seurat[[i]], vars.to.regress = c("mitoRatio"), vst.flavor = "v2")
}

# Check which assays are stored in objects
split_seurat$AM@assays

# Save the split seurat object
saveRDS(split_seurat, "/stor/work/Fonken/UT23_snRNAseq/local_ut23/split_seurat.Rds")
```

**Running CCA**

```{r}
# Select the most variable features to use for integration
integ_features <- SelectIntegrationFeatures(object.list = split_seurat, 
                                            nfeatures = 3000) 

# Prepare the SCT list object for integration
split_seurat <- PrepSCTIntegration(object.list = split_seurat, 
                                   anchor.features = integ_features)

# Find best buddies - can take a while to run
integ_anchors <- FindIntegrationAnchors(object.list = split_seurat, 
                                        normalization.method = "SCT", 
                                        anchor.features = integ_features)

# Integrate across conditions
seurat_integrated <- IntegrateData(anchorset = integ_anchors, 
                                   normalization.method = "SCT")

# Save integrated seurat object
saveRDS(seurat_integrated, "/stor/work/Fonken/UT23_snRNAseq/local_ut23/integrated_seurat.rds")

# Read in integrated seurat object
ut23.integrated <- readRDS("/stor/work/Fonken/UT23_snRNAseq/local_ut23/integrated_seurat.rds")
```

### PCA and UMAP of integrated object

```{r}
# Run PCA
ut23.integrated <- RunPCA(object = ut23.integrated)

# Plot PCA
PCAPlot(ut23.integrated,
        pt.size = 1,
        split.by = "sample")  

# Set seed
set.seed(123456)

# Run UMAP
ut23.integrated <- RunUMAP(ut23.integrated, 
                             dims = 1:40,, 
			     reduction = "pca")

# Plot UMAP                             
DimPlot(ut23.integrated, pt.size = 1)   

# Plot UMAP split by sample
DimPlot(ut23.integrated,
        pt.size = 1,
        split.by = "sample")  
```

### Data Clustering

```{r}
# Determine the K-nearest neighbor graph
ut23.integrated <- FindNeighbors(object = ut23.integrated, 
                                dims = 1:40)

# Determine the clusters for various resolutions                                
ut23.integrated <- FindClusters(object = ut23.integrated,
                               resolution = c(0.2, 0.4, 0.6, 0.8, 1.0, 1.4))

# Assign identity of clusters
Idents(object = ut23.integrated) <- "integrated_snn_res.0.2"

# Plot the UMAP
DimPlot(ut23.integrated,
        pt.size = 1,
        reduction = "umap",
        label = TRUE,
        label.size = 6)
```

### Clustering Quality Control

```{r}
# Extract identity and sample information from seurat object to determine the number of cells per cluster per sample
n_cells <- FetchData(ut23.integrated, 
                     vars = c("ident", "sample")) %>%
        dplyr::count(ident, sample)

# Barplot of number of cells per cluster by sample
ggplot(n_cells, aes(x=ident, y=n, fill=sample)) +
    geom_bar(position=position_dodge(), stat="identity") +
    geom_text(aes(label=n), vjust = -.2, position=position_dodge(1))

# UMAP of cells in each cluster by sample
DimPlot(ut23.integrated, 
        label = TRUE, 
        pt.size = 1,
        split.by = "sample")  + NoLegend()

metrics <-  c("nUMI", "nGene", "S.Score", "G2M.Score", "mitoRatio")

FeaturePlot(ut23.integrated, 
            reduction = "umap", 
            features = metrics,
            pt.size = 0.4, 
            order = TRUE,
            min.cutoff = 'q10',
            label = TRUE)

# Boxplot of nGene per cluster
ggplot(ut23.integrated@meta.data) +
    geom_boxplot(aes(x=integrated_snn_res.0.4, y=nGene, fill=integrated_snn_res.0.4)) +
    NoLegend()
```

### Looking at Clusters

```{r}
# Select the RNA counts slot to be the default assay
DefaultAssay(ut23.integrated) <- "RNA"

# Normalize RNA data for visualization purposes
ut23.integrated <- NormalizeData(ut23.integrated, verbose = FALSE)
```

```{r}
FindConservedMarkers(ut23.integrated,
                     ident.1 = 2,
                     grouping.var = "sample",
                     only.pos = TRUE,
		     min.diff.pct = 0.25,
                     min.pct = 0.25,
		     logfc.threshold = 0.5)
```

### Microglia

```{r}
FeaturePlot(ut23.integrated, 
            reduction = "umap", 
            features = c("Cx3cr1", "Tmem119"), 
            order = TRUE,
            min.cutoff = 'q10', 
            pt.size = 1,
            label = TRUE)
```

### Astrocytes

```{r}
FeaturePlot(ut23.integrated, 
            reduction = "umap", 
            features = c("Aqp4", "Gfap"), 
            order = TRUE,
            min.cutoff = 'q10', 
            pt.size = 1,
            label = TRUE)
```

### Oligodendrocytes

```{r}
FeaturePlot(ut23.integrated, 
            reduction = "umap", 
            features = c("Mog", "Mbp"), 
            order = TRUE,
            min.cutoff = 'q10', 
            pt.size = 1,
            label = TRUE)
```

### Glutamatergic Neurons

```{r}
FeaturePlot(ut23.integrated, 
            reduction = "umap", 
            features = c("Grin1", "Gls"), 
            order = TRUE,
            min.cutoff = 'q10', 
            pt.size = 1,
            label = TRUE)
```

### General Neurons

```{r}
FeaturePlot(ut23.integrated, 
            reduction = "umap", 
            features = c("Rbfox3"), 
            order = TRUE,
            min.cutoff = 'q10', 
            pt.size = 1,
            label = TRUE)
```

### GABAergic Neurons

```{r}
FeaturePlot(ut23.integrated, 
            reduction = "umap", 
            features = c("Gad1"), 
            order = TRUE,
            min.cutoff = 'q10', 
            pt.size = 1,
            label = TRUE)
```

### Endothelial cells

```{r}
FeaturePlot(ut23.integrated, 
            reduction = "umap", 
            features = c("Pecam1"), 
            order = TRUE,
            min.cutoff = 'q10', 
            pt.size = 1,
            label = TRUE)
```

### Oligodendrocyte Precursor Cells

```{r}
FeaturePlot(ut23.integrated, 
            reduction = "umap", 
            features = c("Pdgfra", "Cspg4"), 
            order = TRUE,
            min.cutoff = 'q10', 
            pt.size = 1,
            label = TRUE)
```

```{r}
FeaturePlot(ut23.integrated, 
            reduction = "umap", 
            features = c("Flt1", "Pdgfra"), 
            order = TRUE,
            min.cutoff = 'q10', 
            pt.size = 1,
            label = TRUE)
```

```{r fig.height = 5, fig.width = 20}
markers <- list()
markers[["Microglia"]] <- c("Cx3cr1", "Csf1r", "Ptprc", "Itgam")
markers[["Astrocytes"]] <- c("Aqp4", "Gfap")
markers[["Neurons"]] <- c("Rbfox3")
markers[["Glut Neur"]] <- c("Grin1", "Gls", "Slc17a7", "Camk2a")
markers[["GABA Neur"]] <- c("Gad1", "Gad2")
markers[["Endothelial"]] <- c("Pecam1", "Vwf")
markers[["Oligo"]] <- c("Mog", "Mbp", "Plp1")
markers[["Oligo Pre"]] <- c("Pdgfra", "Cspg4")

# Create dotplot based on RNA expression
DotPlot(ut23.integrated, markers, assay="RNA")
```

```{r}

```

**Comparing Cluster 21 and 9**

Cluster 21 does express immune markers, but also expresses oligodendrocyte markers. I think that these are oligodendrocytes displaying some immune like responses.

```{r fig.height = 5, fig.width = 10}
microgliamarkers <- list()
microgliamarkers[["Microglia"]] <- c("Cx3cr1", "Ptprc", "P2ry12", "Tgfbr1", "Mbp", "Mog")

# Create dotplot based on RNA expression
DotPlot(ut23.integrated, microgliamarkers, assay="RNA")
```

### Renaming Idents

```{r}
# Rename all identities
ut23.integrated <- RenameIdents(object = ut23.integrated, 
                               "0" = "Oligodendrocytes",
                               "1" = "Excitatory Neurons",
                               "2" = "Excitatory Neurons",
                               "3" = "Excitatory Neurons",
                               "4" = "Excitatory Neurons",
                               "5" = "Inhibitory Neurons",
                               "6" = "Excitatory Neurons",
                               "7" = "Oligodendrocyte Precursors",
                               "8" = "Inhibitory Neurons",
                               "9" = "Microglia",
                               "10" = "Excitatory Neurons",
                               "11" = "Inhibitory Neurons",
                               "12" = "Excitatory Neurons",
                               "13" = "Excitatory Neurons",
                               "14" = "Excitatory Neurons",
                               "15" = "Astrocytes",
                               "16" = "Excitatory Neurons",
                               "17" = "Excitatory Neurons",
                               "18" = "Inhibitory Neurons",
                               "19" = "Excitatory Neurons",
                               "20" = "Excitatory Neurons",
                               "21" = "Oligodendrocytes",
                               "22" = "Oligodendrocytes",
                               "23" = "Excitatory Neurons",
                               "24" = "Endothelial Cells",
                               "25" = "Excitatory Neurons",
			                         "26" = "Excitatory Neurons")

#Set the cell type in the metadata 
ut23.integrated$CellType <- Idents(ut23.integrated)
```

### Labeled Cluster UMAP Plot

```{r}
DimPlot(ut23.integrated,
        pt.size = 1,
        reduction = "umap",
        label = TRUE,
        label.size = 3, 
        repel = TRUE)
```

### Save seurat object 

```{r}
saveRDS(ut23.integrated, "/stor/work/Fonken/UT23_snRNAseq/local_ut23/ut23_object.rds")

```
