---
title: "ut23_graphs"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(patchwork) #You need version 1.3.0 install_github("thomasp85/patchwork@v1.3.0")
# you also must have install.packages("devtools")- if this has problems restart R 
library(figpatch) #for images in patchwork 
library(SeuratObject)
library(RColorBrewer)
library(Seurat)
library(EnhancedVolcano)
library(ggthemes)
library(ggprism)
library(DESeq2)
library(pheatmap)
library(EnhancedVolcano)
library(DEsingle) # From bioconductor 
library(MAST) #From bioconductor
library(harmony)

# Weird packages for Pseudobulking (I don't think I need any of these anymore)
library(SingleCellExperiment)
library(Matrix)
library(Matrix.utils) # Note this package is not available on CRAN anymore, I had to install like this: remotes::install_github("cvarrichio/Matrix.utils")
library(data.table)

# Packages for Go and KEGG analysis 
library(org.Rn.eg.db) #BiocManager::install("org.Rn.eg.db")
library(AnnotationDbi) #BiocManager::install("AnnotationDbi")
library(clusterProfiler) #BiocManager::install("clusterProfiler")
library(genekitr) #I prefer the graphs this makes over clusterProfiler
library(scales) # for wrapping long text in graphs 
library(fgsea) # only using this for mapIdsList

# Heatmap
library(dittoSeq)
```

Why can't I use Seurat 5.0? Seurat needs SeruatObject, which needs Matrix. The newest version of Matrix is only compatible with R 4.4, the compute server runs R 4.3.

### Reading in the Data

```{r}
ut23.object <- readRDS("/stor/work/Fonken/UT23_snRNAseq/local_ut23/ut23_object.rds")

# Normalize the RNA data in the ut23.object
ut23.object <- NormalizeData(ut23.object, assay = "RNA", normalization.method = "LogNormalize", scale.factor = 10000)


#Rename some things in the metadata to make my life easier when pseudobulking 
colnames(ut23.object@meta.data)[colnames(ut23.object@meta.data) == "sample"] <- "sample_id"
colnames(ut23.object@meta.data)[colnames(ut23.object@meta.data) == "group"] <- "group_id"

# Joining layers (this is now necessary in Seurat v5)
DefaultAssay(ut23.object) <- "RNA"

ut23.object <- JoinLayers(ut23.object)

```

### Figure 1

```{r fig.height = 9, fig.width = 10}
# A: Image----
fig1a <- fig("/stor/work/Fonken/UT23_snRNAseq/local_ut23/Graphs/Fig1a.png")

# Reordering the metadata for plotting 
ut23.object@meta.data$group_id <- factor(ut23.object@meta.data$group_id, 
                                         levels = c("AV", "YV", "AM"))

# B: By subject-------
Idents(ut23.object) <- ut23.object$sample_id

sample_dimplot <- DimPlot(ut23.object,
    pt.size = 2,
    reduction = "umap",
    label = FALSE,
    label.size = 2, 
    repel = FALSE) + 
    scale_color_brewer(palette = "Set3") +
    theme_prism(base_size = 10)  

# C:By group --------
Idents(ut23.object) <- ut23.object$cluster_id

cluster_id_dimplot <- DimPlot(ut23.object,
        pt.size = 2,
        reduction = "umap",
        label = FALSE,
        label.size = 2, 
        repel = FALSE) + 
   theme_prism(base_size = 10)   

# D: Compute number of cells per celltype------
n_cells <- FetchData(ut23.object, 
                     vars = c("cluster_id", "group_id")) %>%
        dplyr::count(cluster_id, group_id)

# Barplot of number of cells per celltype by group
cellcounts_graph <- ggplot(n_cells, aes(x=group_id, y = n, fill=cluster_id)) +
   geom_bar(stat = "identity", width = 0.5) + 
   theme_prism(base_size = 10) +
   xlab("Group") +
   ylab("Number of Cells") +
   theme(legend.position = "none")
  
# E: Cell Type Expression -------
markers <- list()
markers[["Microglia"]] <- c("Cx3cr1", "Csf1r", "P2ry12")
markers[["Astrocytes"]] <- c("Aqp4", "Gfap")
markers[["Oligo."]] <- c("Mog")
markers[["OPC"]] <- c("Pdgfra")
markers[["Neurons"]] <- c("Rbfox3")
markers[["Glut. Neurons"]] <- c("Slc17a7")
markers[["GABA Neurons"]] <- c("Gad1")
markers[["Endothelial"]] <- c("Pecam1")

# Create dotplot based on RNA expression
cellexpression_dotplot <- DotPlot(ut23.object, markers, assay="RNA", scale = TRUE) + 
  xlab(NULL) + 
  ylab(NULL) + 
  ggtitle("Cell Type Marker Expression") + 
    theme(
    # Make axes thicker
    axis.line = element_line(size = 0.75, color = "black"),
    axis.ticks = element_line(size = 0.75, color = "black"),
    axis.ticks.length = unit(0.15, "cm"),
    axis.text = element_text(size = 10, face = "bold", color = "black"),
    legend.text = element_text(size = 8),
    legend.title = element_text(size = 8, face = "bold"),
    plot.title = element_text(size = 10, face = "bold", hjust = 0.5)
    ) + 
  theme(axis.text.x = element_text(size = 8)) + 
  theme(strip.text = element_blank()) + 
  RotatedAxis() 

# Patchwork plot combo 
top_graphs <- sample_dimplot + cluster_id_dimplot + cellcounts_graph + plot_layout(widths = c(2, 2, 1))

top_graphs

fig1a / top_graphs / free(cellexpression_dotplot) + plot_annotation(tag_levels = 'A') + plot_layout(height = c(1,1,1.5)) & theme(plot.tag = element_text(face = "bold"))

ggsave("/stor/work/Fonken/UT23_snRNAseq/local_ut23/Graphs/ut23_dimplots.png", width = 10, height = 9, dpi = 300, units = "in")

```

### 

```{r}
# Create a vector of all marker genes

```

### Cell Type Identification

Marker list:

Microglia:

-   Cx3cr1: receptor that binds to fralktaine, responsible for neuron to microglia communication

-   Csf1r: receptor that controls survival, proliferation and differentiation of microglia

Astrocytes:

-   Aqp4: astrocyte water channel

-   Gfap: astrocyte intermediate filament

Glut. Neurons:

-   Slc17a7: responsible for packaging glutamate into synaptic vesicles

-   Grin1: NMDA receptor subunit

GABA Neurons:

-   Gad1: Enzyme responsible for converting glutamate to GABA

-   Gabra1: subunit of GABA-A receptor

Oligodendrocytes:

-   Mog: Cell surface protein expressed in oligodendrocytes that plays a role in the integrity and function of myelin

-   Mbp: Major structural protein of myelin

OPCs:

-   Pdgfra: A receptor that regulations proliferation, migration, and differntation of OPCs into mature oligodendrocytes

### Using MAST for Differential Expression Analysis

This function runs through all cell types, and makes comparisons between YV and AV, and AM and AV

```{r fig.height = 6, fig.width = 12}
# Define a function to perform analysis for a given cell type
analyze_cell_type <- function(cell_type) {
  # Subset the Seurat object for the specified cell type
  cell_subcluster <- subset(ut23.object, idents = cell_type)
  
  # Set the default assay to RNA
  DefaultAssay(cell_subcluster) <- "RNA"
  
  # Set the identity class to the group metadata
  Idents(cell_subcluster) <- cell_subcluster$group_id
  
  # Run FindMarkers using MAST to compare AV vs YV
  mast_yvav <- FindMarkers(cell_subcluster, 
                            logfc.threshold = 0,
                            ident.1 = "YV", 
                            ident.2 = "AV", 
                            test.use = "MAST")
  
  # Run FindMarkers using MAST to compare AM vs AV
  mast_amav <- FindMarkers(cell_subcluster, 
                            logfc.threshold = 0,
                            ident.1 = "AM", 
                            ident.2 = "AV", 
                            test.use = "MAST")
  
  # Create volcano plots for each comparison
  volcano_yvav <- EnhancedVolcano(mast_yvav,
                                  lab = rownames(mast_yvav),
                                  x = "avg_log2FC",
                                  y = "p_val_adj",
                                  FCcutoff = 0.25,
                                  pCutoff = 0.05,
                                  subtitle = NULL,
                                  title = "Young Vehicle vs Aged Vehicle")
  
  volcano_amav <- EnhancedVolcano(mast_amav,
                                  lab = rownames(mast_amav),
                                  x = "avg_log2FC",
                                  y = "p_val_adj",
                                  FCcutoff = 0.25,
                                  legendPosition = "none",
                                  pCutoff = 0.05,
                                  subtitle = NULL,
                                  title = "Aged M Vaccae vs Aged Vehicle")
  
  # Combine the volcano plots with Patchwork
  volcano_combined <- volcano_yvav + volcano_amav
  volcano_combined <- volcano_combined + plot_annotation(cell_type)
  
  # Return a list containing the volcano plot and the markers results
  return(list(volcano_yvav = volcano_yvav,
              volcano_amav = volcano_amav, 
              mast_yvav = mast_yvav, 
              mast_amav = mast_amav))
}

# List of cell types to analyze
cell_types <- c("Microglia", "Astrocytes", "Oligodendrocytes", "Excitatory Neurons", "Inhibitory Neurons", "Oligodendrocyte Precursors", "Endothelial")

# Initialize a list to store results for each cell type
results_list <- list()

# Iterate over each cell type and run the analysis
for (cell_type in cell_types) {
  print(paste("Analyzing cell type:", cell_type))
  analysis_result <- analyze_cell_type(cell_type)
  
  # Store the results in the results_list
  results_list[[cell_type]] <- analysis_result
}

# Print the volcano plot for Oligodendrocytes
print(results_list[["Oligodendrocyte Precursors"]]$volcano_plot)

#saving the results_list

saveRDS(results_list, file = "/stor/work/Fonken/UT23_snRNAseq/local_ut23/dge_results.rds")
```

### Figure 2: Gene Set Enrichment Analysis (GO and KEGG) and Volcano Plots

```{r fig.height = 15, fig.width = 12}
# Read in the list of DEGs
dge_results <- readRDS("/stor/work/Fonken/UT23_snRNAseq/local_ut23/dge_results.rds")

# Microglia data frames, filtering for significang genes, then adding ENTREZID 
micro_yvav <- as.data.frame(dge_results$Microglia$mast_yvav) 

#lists of DEGs to look up
micro_yvav_filt <- micro_yvav %>%
  filter(p_val_adj < 0.05 &
         (avg_log2FC > 0.5 | avg_log2FC < -0.5)) 

micro_amav <- as.data.frame(dge_results$Microglia$mast_amav) 

#lists of DEGs to look up
micro_amav_filt <- micro_amav %>%
  filter(p_val_adj < 0.05 &
         (avg_log2FC > 0.5 | avg_log2FC < -0.5)) 

# YVAV --------
# Creating the Ranked Gene List for GSEA GO Analysis 
yvav_genelist <- micro_yvav$avg_log2FC
names(yvav_genelist) <- rownames(micro_yvav)
yvav_genelist = sort(yvav_genelist, decreasing = TRUE)

gse_yvav <- gseGO(geneList=yvav_genelist, 
             ont ="BP", 
             keyType = "SYMBOL", 
             minGSSize = 3, 
             maxGSSize = 800, 
             pvalueCutoff = 0.05, 
             verbose = TRUE, 
             OrgDb = org.Rn.eg.db, 
             pAdjustMethod = "none") 

gse_yvav_df <- gse_yvav@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            gse_yvav@result %>%
            arrange(NES) %>%
            slice(1:5)
        )

gse_yvav_graph <- ggplot(gse_yvav_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#00B6EB", "FALSE" = "#00B6EB")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("GO: Biological Processes") + 
    ylab(NULL)

#AMAV
# Creating the Ranked Gene List for GSEA GO Analysis 
amav_genelist <- micro_amav$avg_log2FC
names(amav_genelist) <- rownames(micro_amav)
amav_genelist = sort(amav_genelist, decreasing = TRUE)

gse_amav <- gseGO(geneList=amav_genelist, 
             ont ="BP", 
             keyType = "SYMBOL", 
             minGSSize = 3, 
             maxGSSize = 800, 
             pvalueCutoff = 0.05, 
             verbose = TRUE, 
             OrgDb = org.Rn.eg.db, 
             pAdjustMethod = "none")

gse_amav_df <- gse_amav@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            gse_amav@result %>%
            arrange(NES) %>%
            slice(1:5)
        )

gse_amav_graph <- ggplot(gse_amav_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#00B6EB", "FALSE" = "#00B6EB")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("GO: Biological Processes") + 
    ylab(NULL)

# YVAV
# Creating the ranked gene list for GSEA KEGG Analysis (This one needs EntrezIDs)
micro_yvav_kegg <- micro_yvav %>%
  rownames_to_column(var = "gene")

micro_yvav_kegg$entrez_id <- mapIds(org.Rn.eg.db, 
                               keys = micro_yvav_kegg$gene, 
                               column = "ENTREZID", 
                               keytype = "SYMBOL", 
                               multiVals = "first")

# Excluding NA values 
micro_yvav_kegg <- na.omit(micro_yvav_kegg)

# Creating list 
kegglist <- micro_yvav_kegg$avg_log2FC
names(kegglist) <- micro_yvav_kegg$entrez_id
kegglist = sort(kegglist, decreasing = TRUE)
kegg_organism = "rno" # need to define organism with 3 letter code

yvav_kegg <- gseKEGG(geneList = kegglist,
               organism     = kegg_organism,
               minGSSize    = 3,
               maxGSSize    = 800,
               pvalueCutoff = 0.05,
               pAdjustMethod = "none",
               keyType       = "ncbi-geneid")

yvav_kegg_df <- yvav_kegg@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            yvav_kegg@result %>%
            arrange(NES) %>%
            slice(1:5)
        )

#11.20.24 experimental stuff to try to get gene names as the entrez id symbols
yvav_kegg_df$core_enrichment <- gsub("/", ",", yvav_kegg_df$core_enrichment )

yvav_kegg_df$core_enrichment_list <- strsplit(yvav_kegg_df$core_enrichment, ",")

yvav_kegg_df$gene_symbols <- mapIdsList(org.Rn.eg.db,
                              keys = yvav_kegg_df$core_enrichment_list,
                              column = "SYMBOL",
                              keytype = "ENTREZID",
                              multiVals = "first")

comma_separated_list_test <- paste(sprintf('"%s"', yvav_kegg_df$gene_symbols[[6]]), collapse = ",")

# end----

yvav_kegg_graph <- ggplot(yvav_kegg_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#00B6EB", "FALSE" = "#00B6EB")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("KEGG Pathways") + 
    ylab(NULL)

# AMAV
# Creating the ranked gene list for GSEA KEGG Analysis (This one needs EntrezIDs)
micro_amav_kegg <- micro_amav %>%
  rownames_to_column(var = "gene")

micro_amav_kegg$entrez_id <- mapIds(org.Rn.eg.db, 
                               keys = micro_amav_kegg$gene, 
                               column = "ENTREZID", 
                               keytype = "SYMBOL", 
                               multiVals = "first")

# Excluding NA values 
micro_amav_kegg <- na.omit(micro_amav_kegg)

# Creating list 
kegglist <- micro_amav_kegg$avg_log2FC
names(kegglist) <- micro_amav_kegg$entrez_id
kegglist = sort(kegglist, decreasing = TRUE)
kegg_organism = "rno" # need to define organism with 3 letter code

amav_kegg <- gseKEGG(geneList = kegglist,
               organism     = kegg_organism,
               minGSSize    = 3,
               maxGSSize    = 800,
               pvalueCutoff = 0.05,
               pAdjustMethod = "none",
               keyType       = "ncbi-geneid")

amav_kegg_df <- amav_kegg@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            amav_kegg@result %>%
            arrange(NES) %>%
            slice(1:5)
        )


amav_kegg_graph <- ggplot(amav_kegg_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#00B6EB", "FALSE" = "#00B6EB")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("KEGG Pathways") + 
    ylab(NULL)

# Volcano plots read in
# YVAV
keyvals_yvav <- ifelse(
    dge_results[["Microglia"]]$mast_yvav$p_val_adj < .05 &        dge_results[["Microglia"]]$mast_yvav$avg_log2FC < -.5, '#00B6EB',
      ifelse(dge_results[["Microglia"]]$mast_yvav$p_val_adj < .05 &        dge_results[["Microglia"]]$mast_yvav$avg_log2FC > .5, '#00B6EB',
        'gray'))
  keyvals_yvav[is.na(keyvals_yvav)] <- 'gray'
  names(keyvals_yvav)[keyvals_yvav == '#00B6EB'] <- 'differentially expressed gene (p-adjusted < 0.05)'

volcano_yvav <- EnhancedVolcano(dge_results[["Microglia"]]$mast_yvav,
                                lab = rownames(dge_results[["Microglia"]]$mast_yvav),
                                selectLab = union(rownames(dge_results[["Microglia"]]$mast_yvav)[which(names(keyvals_yvav) %in% c('high', 'low'))],
                                                  c('Calm2','Il1rapl2','Mif','Cox5a','Sod1','Npy','Egr1','Cox5a', 'Dpp10')),
                                x = "avg_log2FC",
                                y = "p_val",
                                boxedLabels = TRUE,
                                drawConnectors = TRUE,
                                FCcutoff = 0.5,
                                pCutoff = 0.05,
                                pCutoffCol = "p_val_adj",
                                colCustom = keyvals_yvav,
                                xlim = c(-4,4),
                                ylim = c(0,58),
                                subtitle = NULL,
                                gridlines.major = FALSE,
                                gridlines.minor = FALSE,
                                ) + 
  ggtitle("Young Vehicle vs Aged Vehicle \nDifferential Expression") + 
  theme_prism(base_size = 10) + 
  theme(legend.position = "none")

# AMAV
keyvals_amav <- ifelse(
    dge_results[["Microglia"]]$mast_amav$p_val_adj < .05 &        dge_results[["Microglia"]]$mast_amav$avg_log2FC < -.5, '#00B6EB',
      ifelse(dge_results[["Microglia"]]$mast_amav$p_val_adj < .05 &        dge_results[["Microglia"]]$mast_amav$avg_log2FC > .5, '#00B6EB',
        'gray'))
  keyvals_amav[is.na(keyvals_amav)] <- 'gray'
  names(keyvals_amav)[keyvals_amav == '#00B6EB'] <- 'differentially expressed gene (p-adjusted < 0.05)'

volcano_amav <- EnhancedVolcano(dge_results[["Microglia"]]$mast_amav,
                                lab = rownames(dge_results[["Microglia"]]$mast_amav),
                                selectLab = union(rownames(dge_results[["Microglia"]]$mast_amav)[which(names(keyvals_amav) %in% c('high', 'low'))],
                                                  c('Hsp90ab1','Camk2n1','Rps6ka2','Parp8','Rnf150','Scg5','Cox5a', 'Rps6ka2', 'AABR07000398.1')),
                                x = "avg_log2FC",
                                y = "p_val",
                                boxedLabels = TRUE,
                                drawConnectors = TRUE,
                                FCcutoff = 0.5,
                                pCutoff = 0.05,
                                pCutoffCol = "p_val_adj",
                                colCustom = keyvals_amav,
                                xlim = c(-4,4),
                                ylim = c(0,58),
                                subtitle = NULL,
                                gridlines.major = FALSE,
                                gridlines.minor = FALSE,
                                ) + 
  ggtitle("Aged M Vaccae vs Aged Vehicle \nDifferential Expression") + 
  theme_prism(base_size = 10) + 
  theme(legend.position = "bottom")

# Figure 2 Creation---
free(volcano_yvav + volcano_amav) / (gse_yvav_graph + gse_amav_graph) / (yvav_kegg_graph + amav_kegg_graph) + plot_layout(height = c(2,2,2)) + plot_annotation(tag_levels = 'A') 

ggsave("/stor/work/Fonken/UT23_snRNAseq/local_ut23/Graphs/microglia_ut23_volcanogsea.png", dpi = 300, width = 12, height = 15)

```

### Figure 3: Heat map of Inflammatory Genes Among Cell Types

Genes associated with aging were taken from this paper:

**Hallmarks of aging-based dual-purpose disease and age-associated targets predicted using PandaOmics AI-powered discovery engine**

<https://www.aging-us.com/article/203960/text#f2>

```{r fig.height = 12, fig.width = 10}
# read the dge results results file 
dge_results <- readRDS("/stor/work/Fonken/UT23_snRNAseq/local_ut23/dge_results.rds")

# Gene list
aging_genes <- c("Tlr4",
           "Mmp9",
           "Tlr2",
           "Casp1",
           "Casp3",
           "Vegfa",
           "Egfr",
           "Akt1",
           "Mapk8",
           "Il1b",
           "Tnf",
           "Itgb2",
           "Il6",
           "Cat",
           "Ppara",
           "Jak2",
           "Jak1",
           "Cxcr4",
           "Mmp2",
           "Kit",
           "Mtor",
           "Esr1",
           "Tgfb1",
           "Spp1",
           "Hspa5",
           "Sirt1",
           "Ar",
           "Casp8",
           "Itgam",
           "Hdac1",
           "Fgf2",
           "Mapk1",
           "Gsk3b",
           "Ep300",
           "Hdac9",
           "Mapk14",
           "Kdr",
           "Igf1",
           "Insr",
           "Ngf",
           "Pten",
           "Vdr",
           "Ikbkb",
           "Chuk",
           "Traf6",
           "Parp1",
           "Dnmt1",
           "Src",
           "Rhoa",
           "Ptk2",
           "Itgav",
           "Cxcl12",
           "Hgf",
           "Lox",
           "Adam17",
           "Sod2",
           "Igf1r",
           "Igf2",
           "Egln1",
           "Tgfbr2",
           "Rock1",
           "Notch1",
           "Ezh2",
           "Abl1",
           "Hdac6")

#aggregating expression for heatmap
aggr.ut23 <- AggregateExpression(ut23.object, 
                    assays = "RNA",
                    return.seurat = TRUE,
                    group.by = c("sample_id", "cluster_id"),
                    normalization.method = "LogNormalize")

 "#FFB6C1", "#FFD700", "#6495ED"

#dittoseq heatmap (uses pheatmap)
dittoHeatmap(aggr.ut23, 
             aging_genes, 
             annot.by = c("cluster_id", "sample_id"),
             heatmap.colors = colorRampPalette(c("#1f77b4", "white", "#ff7f0e"))(50),
             annot.colors = c("#A58AFF", "#FB61D7", "#C49A00", "#53B400", "#00B6EB", "#00C094", "#F8766D","#FFC0CB", "#FFB6C1", "#FFADD8","#FFDF00", "#FFD700", "#FFC700", "#6BA3FF", "#6495ED", "#5479C9"))
             
```

Antigen presentation genes

```{r}
{r fig.height = 12, fig.width = 10}
# read the dge results results file 

# Gene list
antigen_genes <- c("Calm2", "Calm1.1", "Chgb", "Atp1b1", "Olfm1", "Ndufa4", "Dpp10", "Ptprd", "Atp6v0c", "Ubb", "Nkain2", "Stmn3", "Slc25a4", "Hsp90ab1", "Rnasek", "Csmd1", "Hsp90aa1", "Caln1", 
"Dlg2", "Cox7b", "Plp1", "Nlgn1", "Tenm2", "Mdga2", "Cox7c", "Scg5", "Cox4i1", "Atp5if1", 
"Calm1", "Fam155a", "Mt-co2", "Dynll1", "Atp5mg", "Caly", "Ptprg", "Actb", "Etl4")


#aggregating expression for heatmap
aggr.ut23 <- AggregateExpression(ut23.object, 
                    assays = "RNA",
                    return.seurat = TRUE,
                    group.by = c("sample_id", "cluster_id"),
                    normalization.method = "LogNormalize")

 "#FFB6C1", "#FFD700", "#6495ED"

#dittoseq heatmap (uses pheatmap)
dittoHeatmap(aggr.ut23, 
             antigen_genes, 
             annot.by = c("cluster_id", "sample_id"),
             heatmap.colors = colorRampPalette(c("#1f77b4", "white", "#ff7f0e"))(50),
             annot.colors = c("#A58AFF", "#FB61D7", "#C49A00", "#53B400", "#00B6EB", "#00C094", "#F8766D","#FFC0CB", "#FFB6C1", "#FFADD8","#FFDF00", "#FFD700", "#FFC700", "#6BA3FF", "#6495ED", "#5479C9"))
```

### Clustering the Microglia Cluster

There is a function canned FindSubCluster but I don't think it actually reclusters the data, there aren't a lot of resources online about how to do this but I'm roughly following this:\
<https://github.com/satijalab/seurat/issues/4320>\
\
There seem to be several ways to do it and I'm basically just totally re-doing the clustering with the subsetted object.

```{r}
# Subsetting one cluster
microglia_subcluster <- subset(ut23.object, idents = "Microglia")

# Changing the default assay from SCT to RNA
DefaultAssay(microglia_subcluster) <- "RNA"

# Running SCTransform 
microglia_subcluster.list <- SplitObject(microglia_subcluster, split.by="sample_id")
microglia_subcluster.list <- lapply(X = microglia_subcluster.list, 
                       FUN = SCTransform, 
                       method = "glmGamPoi", 
                       return.only.var.genes = FALSE)
var.features.microglia <- SelectIntegrationFeatures(object.list = microglia_subcluster.list, nfeatures = 500)

microglia_subcluster.sct <- merge(x = microglia_subcluster.list[[1]], y = microglia_subcluster.list[2:length(microglia_subcluster.list)], merge.data=TRUE)
VariableFeatures(microglia_subcluster.sct) <- var.features.microglia
microglia_subcluster.sct <- RunPCA(microglia_subcluster.sct, verbose = FALSE)

# Using batch as covariates 
microglia_subcluster.sct <- RunHarmony(microglia_subcluster.sct, assay.use="SCT", group.by.vars = "batch")
microglia_subcluster.sct <- RunUMAP(microglia_subcluster.sct, reduction = "harmony", dims = 1:10)
microglia_subcluster.sct <- FindNeighbors(microglia_subcluster.sct, reduction = "harmony", dims = 1:10) 

# Finding clusters 
microglia_subcluster.sct <- FindClusters(object = microglia_subcluster.sct,
                               resolution = c(0.2, 0.4, 0.6, 0.8, 1.0, 1.4))

# Assign identity of clusters
Idents(object = microglia_subcluster.sct) <- "SCT_snn_res.0.2"
  
# Assign identity of clusters
#Set the cell type in the metadata 
#int_microglia$microglia.subcluster <- Idents(int_microglia)

#Dim plot 
DimPlot(microglia_subcluster.sct,
        pt.size = 1
       ) 

FeaturePlot(microglia_subcluster.sct, 
            reduction = "umap", 
            features = c("Cx3cr1"), 
            order = TRUE,
            min.cutoff = 'q10', 
            pt.size = 1,
            label = TRUE)

#cell counts in microglia subcluster
n_cells_micro <- FetchData(microglia_subcluster.sct, 
                     vars = c("SCT_snn_res.0.2", "group_id", "sample_id")) %>%
        dplyr::count(SCT_snn_res.0.2, group_id, sample_id)


# Barplot of number of cells per celltype by sample
ggplot(n_cells_micro, aes(x=SCT_snn_res.0.2, y=n, fill=group_id)) +
    geom_bar(position=position_dodge(), stat="identity") +
    geom_text(aes(label=n), vjust = -.2, position=position_dodge(1))


# Assume your Seurat object is named 'microglia_subcluster.sct'
# Step 1: Get the variable features you previously identified
all_variable_features <- VariableFeatures(microglia_subcluster.sct)

# Step 2: Set the identity class to clusters if not already set
microglia_subcluster.sct <- SetIdent(microglia_subcluster.sct, value = "SCT_snn_res.0.2")  # Change to your cluster metadata column name

# Step 3: Create a list to store HVGs for each cluster
hvg_list <- list()

# Step 4: Loop through each cluster and store the variable features
for (cluster in unique(Idents(microglia_subcluster.sct))) {
  cluster_subset <- subset(microglia_subcluster.sct, idents = cluster)
  hvg_list[[as.character(cluster)]] <- intersect(all_variable_features, rownames(cluster_subset))
}

# hvg_list now contains the highly variable genes for each cluster





```

```{r fig.height = 5, fig.width = 12}
# Compute number of cells per celltype
n_cells_micro <- FetchData(int_microglia, 
                     vars = c("microglia.subcluster", "group_id")) %>%
        dplyr::count(microglia.subcluster, group_id)

# Barplot of number of cells per celltype by sample
ggplot(n_cells_micro, aes(x=microglia.subcluster, y=n, fill=group_id)) +
    geom_bar(position=position_dodge(), stat="identity") +
    geom_text(aes(label=n), vjust = -.2, position=position_dodge(1))
```

```         
```

```{r}
gse_yvav_gk <- importCP(gse_yvav,type = 'gsea')
gse_yvav_gk$gsea_df$ID <- gse_yvav_gk$gsea_df$Description

gse_yvav_gk$gsea_df <- rbind(
  head(gse_yvav_gk$gsea_df[order(gse_yvav_gk$gsea_df$enrichmentScore, decreasing = TRUE), ], 10),
  tail(gse_yvav_gk$gsea_df[order(gse_yvav_gk$gsea_df$enrichmentScore, decreasing = TRUE), ], 10)
)

gse_yvav_graph <- plotGSEA(gse_yvav_gk, plot_type = "bar", main_text_size = 15)
```

```{r fig.height = 3, fig.width = 50}
FeaturePlot(ut23.object, 
            reduction = "umap", 
            features = c("Ptprd"), 
            order = TRUE,
            min.cutoff = 'q10', 
            split.by = "sample_id",
            pt.size = 2,
            label = TRUE)
```

### DEGs and GSEA for Astrocytes

```{r fig.height = 15, fig.width = 12}
# Read in the list of DEGs
dge_results <- readRDS("/stor/work/Fonken/UT23_snRNAseq/local_ut23/dge_results.rds")

# Astrocyte data frames, filtering for significang genes, then adding ENTREZID 
astro_yvav <- as.data.frame(dge_results$Astrocytes$mast_yvav) 

#lists of DEGs to look up
astro_yvav_filt <- astro_yvav %>%
  filter(p_val_adj < 0.05 &
         (avg_log2FC > 0.5 | avg_log2FC < -0.5)) %>%
  rownames()

astro_amav <- as.data.frame(dge_results$Astrocytes$mast_amav) 

#lists of DEGs to look up
astro_amav_filt <- astro_amav %>%
  filter(p_val_adj < 0.05 &
         (avg_log2FC > 0.5 | avg_log2FC < -0.5)) %>%
  rownames()

# YVAV --------
# Creating the Ranked Gene List for GSEA GO Analysis 
yvav_genelist <- astro_yvav$avg_log2FC
names(yvav_genelist) <- rownames(astro_yvav)
yvav_genelist = sort(yvav_genelist, decreasing = TRUE)

gse_yvav <- gseGO(geneList=yvav_genelist, 
             ont ="BP", 
             keyType = "SYMBOL", 
             minGSSize = 3, 
             maxGSSize = 800, 
             pvalueCutoff = 0.05, 
             verbose = TRUE, 
             OrgDb = org.Rn.eg.db, 
             pAdjustMethod = "none") 

gse_yvav_df <- gse_yvav@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            gse_yvav@result %>%
            arrange(NES) %>%
            slice(1:5)
        )

gse_yvav_graph <- ggplot(gse_yvav_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#A58AFF", "FALSE" = "#A58AFF")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("GO: Biological Processes") + 
    ylab(NULL)

#AMAV
# Creating the Ranked Gene List for GSEA GO Analysis 
amav_genelist <- astro_amav$avg_log2FC
names(amav_genelist) <- rownames(astro_amav)
amav_genelist = sort(amav_genelist, decreasing = TRUE)

gse_amav <- gseGO(geneList=amav_genelist, 
             ont ="BP", 
             keyType = "SYMBOL", 
             minGSSize = 3, 
             maxGSSize = 800, 
             pvalueCutoff = 0.05, 
             verbose = TRUE, 
             OrgDb = org.Rn.eg.db, 
             pAdjustMethod = "none")

gse_amav_df <- gse_amav@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            gse_amav@result %>%
            arrange(NES) %>%
            slice(1:5)
        )

gse_amav_graph <- ggplot(gse_amav_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#A58AFF", "FALSE" = "#A58AFF")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("GO: Biological Processes") + 
    ylab(NULL)

# YVAV
# Creating the ranked gene list for GSEA KEGG Analysis (This one needs EntrezIDs)
astro_yvav_kegg <- astro_yvav %>%
  rownames_to_column(var = "gene")

astro_yvav_kegg$entrez_id <- mapIds(org.Rn.eg.db, 
                               keys = astro_yvav_kegg$gene, 
                               column = "ENTREZID", 
                               keytype = "SYMBOL", 
                               multiVals = "first")

# Excluding NA values 
astro_yvav_kegg <- na.omit(astro_yvav_kegg)

# Creating list 
kegglist <- astro_yvav_kegg$avg_log2FC
names(kegglist) <- astro_yvav_kegg$entrez_id
kegglist = sort(kegglist, decreasing = TRUE)
kegg_organism = "rno" # need to define organism with 3 letter code

yvav_kegg <- gseKEGG(geneList = kegglist,
               organism     = kegg_organism,
               minGSSize    = 3,
               maxGSSize    = 800,
               pvalueCutoff = 0.05,
               pAdjustMethod = "none",
               keyType       = "ncbi-geneid")

yvav_kegg_df <- yvav_kegg@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            yvav_kegg@result %>%
            arrange(NES) %>%
            slice(1:5)
        )

yvav_kegg_graph <- ggplot(yvav_kegg_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#A58AFF", "FALSE" = "#A58AFF")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("KEGG Pathways") + 
    ylab(NULL)

# AMAV
# Creating the ranked gene list for GSEA KEGG Analysis (This one needs EntrezIDs)
astro_amav_kegg <- astro_amav %>%
  rownames_to_column(var = "gene")

astro_amav_kegg$entrez_id <- mapIds(org.Rn.eg.db, 
                               keys = astro_amav_kegg$gene, 
                               column = "ENTREZID", 
                               keytype = "SYMBOL", 
                               multiVals = "first")

# Excluding NA values 
astro_amav_kegg <- na.omit(astro_amav_kegg)

# Creating list 
kegglist <- astro_amav_kegg$avg_log2FC
names(kegglist) <- astro_amav_kegg$entrez_id
kegglist = sort(kegglist, decreasing = TRUE)
kegg_organism = "rno" # need to define organism with 3 letter code

amav_kegg <- gseKEGG(geneList = kegglist,
               organism     = kegg_organism,
               minGSSize    = 3,
               maxGSSize    = 800,
               pvalueCutoff = 0.05,
               pAdjustMethod = "none",
               keyType       = "ncbi-geneid")

amav_kegg_df <- amav_kegg@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            amav_kegg@result %>%
            arrange(NES) %>%
            slice(1:5)
        )

amav_kegg_graph <- ggplot(amav_kegg_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#A58AFF", "FALSE" = "#A58AFF")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("KEGG Pathways") + 
    ylab(NULL)

# Volcano plots read in
# YVAV
keyvals_yvav <- ifelse(
    dge_results[["Astrocytes"]]$mast_yvav$p_val_adj < .05 &        dge_results[["Astrocytes"]]$mast_yvav$avg_log2FC < -.5, '#A58AFF',
      ifelse(dge_results[["Astrocytes"]]$mast_yvav$p_val_adj < .05 &        dge_results[["Astrocytes"]]$mast_yvav$avg_log2FC > .5, '#A58AFF',
        'gray'))
  keyvals_yvav[is.na(keyvals_yvav)] <- 'gray'
  names(keyvals_yvav)[keyvals_yvav == '#A58AFF'] <- 'differentially expressed gene (p-adjusted < 0.05)'


volcano_yvav <- EnhancedVolcano(dge_results[["Astrocytes"]]$mast_yvav,
                                lab = rownames(dge_results[["Astrocytes"]]$mast_yvav),
                                selectLab = union(rownames(dge_results[["Astrocytes"]]$mast_yvav)[which(names(keyvals_yvav) %in% c('high', 'low'))],
                                                  c('Calm2','Hsp90aa1','Hsp90ab1','Bsg','Itih3','Sub1','Actb')),
                                x = "avg_log2FC",
                                y = "p_val",
                                boxedLabels = TRUE,
                                drawConnectors = TRUE,
                                FCcutoff = 0.5,
                                pCutoff = 0.05,
                                pCutoffCol = "p_val_adj",
                                colCustom = keyvals_yvav,
                                xlim = c(-4,4),
                                ylim = c(0,30),
                                subtitle = NULL,
                                gridlines.major = FALSE,
                                gridlines.minor = FALSE,
                                ) + 
  ggtitle("Young Vehicle vs Aged Vehicle \nDifferential Expression") + 
  theme_prism(base_size = 10) + 
  theme(legend.position = "none")

# AMAV
keyvals_amav <- ifelse(
    dge_results[["Astrocytes"]]$mast_amav$p_val_adj < .05 &        dge_results[["Astrocytes"]]$mast_amav$avg_log2FC < -.5, '#A58AFF',
      ifelse(dge_results[["Astrocytes"]]$mast_amav$p_val_adj < .05 &        dge_results[["Astrocytes"]]$mast_amav$avg_log2FC > .5, '#A58AFF',
        'gray'))
  keyvals_amav[is.na(keyvals_amav)] <- 'gray'
  names(keyvals_amav)[keyvals_amav == '#A58AFF'] <- 'differentially expressed gene (p-adjusted < 0.05)'


volcano_amav <- EnhancedVolcano(dge_results[["Astrocytes"]]$mast_amav,
                                lab = rownames(dge_results[["Astrocytes"]]$mast_amav),
                                selectLab = union(rownames(dge_results[["Astrocytes"]]$mast_amav)[which(names(keyvals_amav) %in% c('high', 'low'))],
                                                  c('Hsp90aa1','Itih3','Actb','Fstl5','Colec12','Hsp90ab1','Tpt1')),
                                x = "avg_log2FC",
                                y = "p_val",
                                boxedLabels = TRUE,
                                drawConnectors = TRUE,
                                FCcutoff = 0.5,
                                pCutoff = 0.05,
                                pCutoffCol = "p_val_adj",
                                colCustom = keyvals_amav,
                                xlim = c(-4,4),
                                ylim = c(0,30),
                                subtitle = NULL,
                                gridlines.major = FALSE,
                                gridlines.minor = FALSE,
                                ) + 
  ggtitle("Aged M Vaccae vs Aged Vehicle \nDifferential Expression") + 
  theme_prism(base_size = 10) + 
  theme(legend.position = "bottom")

# Figure 2 Creation---
free(volcano_yvav + volcano_amav) / (gse_yvav_graph + gse_amav_graph) / (yvav_kegg_graph + amav_kegg_graph) + plot_layout(height = c(2,2,2)) + plot_annotation(tag_levels = 'A') 

ggsave("/stor/work/Fonken/UT23_snRNAseq/local_ut23/Graphs/astro_ut23_volcanogsea.png", dpi = 300, width = 12, height = 15)
```

### DEGs and GSEA for Endothelial Cells

```{r fig.height = 15, fig.width = 12}
# Read in the list of DEGs
dge_results <- readRDS("/stor/work/Fonken/UT23_snRNAseq/local_ut23/dge_results.rds")

# Endothelial data frames, filtering for significang genes, then adding ENTREZID 
endo_yvav <- as.data.frame(dge_results$Endothelial$mast_yvav) 

#lists of DEGs to look up
endo_yvav_filt <- endo_yvav %>%
  filter(p_val_adj < 0.05 &
         (avg_log2FC > 0.5 | avg_log2FC < -0.5)) %>%
  rownames()

endo_amav <- as.data.frame(dge_results$Endothelial$mast_amav) 

#lists of DEGs to look up
endo_amav_filt <- endo_amav %>%
  filter(p_val_adj < 0.05 &
         (avg_log2FC > 0.5 | avg_log2FC < -0.5)) %>%
  rownames()

# YVAV --------
# Creating the Ranked Gene List for GSEA GO Analysis 
yvav_genelist <- endo_yvav$avg_log2FC
names(yvav_genelist) <- rownames(endo_yvav)
yvav_genelist = sort(yvav_genelist, decreasing = TRUE)

gse_yvav <- gseGO(geneList=yvav_genelist, 
             ont ="BP", 
             keyType = "SYMBOL", 
             minGSSize = 3, 
             maxGSSize = 800, 
             pvalueCutoff = 0.05, 
             verbose = TRUE, 
             OrgDb = org.Rn.eg.db, 
             pAdjustMethod = "none") 

gse_yvav_df <- gse_yvav@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            gse_yvav@result %>%
            arrange(NES) %>%
            slice(1:5)
        )

gse_yvav_graph <- ggplot(gse_yvav_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#FB61D7", "FALSE" = "#FB61D7")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("GO: Biological Processes") + 
    ylab(NULL)

#AMAV
# Creating the Ranked Gene List for GSEA GO Analysis 
amav_genelist <- endo_amav$avg_log2FC
names(amav_genelist) <- rownames(endo_amav)
amav_genelist = sort(amav_genelist, decreasing = TRUE)

gse_amav <- gseGO(geneList=amav_genelist, 
             ont ="BP", 
             keyType = "SYMBOL", 
             minGSSize = 3, 
             maxGSSize = 800, 
             pvalueCutoff = 0.05, 
             verbose = TRUE, 
             OrgDb = org.Rn.eg.db, 
             pAdjustMethod = "none")

gse_amav_df <- gse_amav@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            gse_amav@result %>%
            arrange(NES) %>%
            slice(1:5)
        )

gse_amav_graph <- ggplot(gse_amav_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#FB61D7", "FALSE" = "#FB61D7")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("GO: Biological Processes") + 
    ylab(NULL)

# YVAV
# Creating the ranked gene list for GSEA KEGG Analysis (This one needs EntrezIDs)
endo_yvav_kegg <- endo_yvav %>%
  rownames_to_column(var = "gene")

endo_yvav_kegg$entrez_id <- mapIds(org.Rn.eg.db, 
                               keys = endo_yvav_kegg$gene, 
                               column = "ENTREZID", 
                               keytype = "SYMBOL", 
                               multiVals = "first")

# Excluding NA values 
endo_yvav_kegg <- na.omit(endo_yvav_kegg)

# Creating list 
kegglist <- endo_yvav_kegg$avg_log2FC
names(kegglist) <- endo_yvav_kegg$entrez_id
kegglist = sort(kegglist, decreasing = TRUE)
kegg_organism = "rno" # need to define organism with 3 letter code

yvav_kegg <- gseKEGG(geneList = kegglist,
               organism     = kegg_organism,
               minGSSize    = 3,
               maxGSSize    = 800,
               pvalueCutoff = 0.05,
               pAdjustMethod = "none",
               keyType       = "ncbi-geneid")

yvav_kegg_df <- yvav_kegg@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            yvav_kegg@result %>%
            arrange(NES) %>%
            slice(1:5)
        )

yvav_kegg_graph <- ggplot(yvav_kegg_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#FB61D7", "FALSE" = "#FB61D7")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("KEGG Pathways") + 
    ylab(NULL)

# AMAV
# Creating the ranked gene list for GSEA KEGG Analysis (This one needs EntrezIDs)
endo_amav_kegg <- endo_amav %>%
  rownames_to_column(var = "gene")

endo_amav_kegg$entrez_id <- mapIds(org.Rn.eg.db, 
                               keys = endo_amav_kegg$gene, 
                               column = "ENTREZID", 
                               keytype = "SYMBOL", 
                               multiVals = "first")

# Excluding NA values 
endo_amav_kegg <- na.omit(endo_amav_kegg)

# Creating list 
kegglist <- endo_amav_kegg$avg_log2FC
names(kegglist) <- endo_amav_kegg$entrez_id
kegglist = sort(kegglist, decreasing = TRUE)
kegg_organism = "rno" # need to define organism with 3 letter code

amav_kegg <- gseKEGG(geneList = kegglist,
               organism     = kegg_organism,
               minGSSize    = 3,
               maxGSSize    = 800,
               pvalueCutoff = 0.05,
               pAdjustMethod = "none",
               keyType       = "ncbi-geneid")

amav_kegg_df <- amav_kegg@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            amav_kegg@result %>%
            arrange(NES) %>%
            slice(1:5)
        )

amav_kegg_graph <- ggplot(amav_kegg_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#FB61D7", "FALSE" = "#FB61D7")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("KEGG Pathways") + 
    ylab(NULL)

# Volcano plots read in
# YVAV
keyvals_yvav <- ifelse(
    dge_results[["Endothelial"]]$mast_yvav$p_val_adj < .05 &        dge_results[["Endothelial"]]$mast_yvav$avg_log2FC < -.5, '#FB61D7',
      ifelse(dge_results[["Endothelial"]]$mast_yvav$p_val_adj < .05 &        dge_results[["Endothelial"]]$mast_yvav$avg_log2FC > .5, '#FB61D7',
        'gray'))
  keyvals_yvav[is.na(keyvals_yvav)] <- 'gray'
  names(keyvals_yvav)[keyvals_yvav == '#FB61D7'] <- 'differentially expressed gene (p-adjusted < 0.05)'


volcano_yvav <- EnhancedVolcano(dge_results[["Endothelial"]]$mast_yvav,
                                lab = rownames(dge_results[["Endothelial"]]$mast_yvav),
                                x = "avg_log2FC",
                                y = "p_val",
                                boxedLabels = TRUE,
                                drawConnectors = TRUE,
                                FCcutoff = 0.5,
                                pCutoff = 0.05,
                                pCutoffCol = "p_val_adj",
                                colCustom = keyvals_yvav,
                                xlim = c(-4,4),
                                ylim = c(0,5),
                                subtitle = NULL,
                                gridlines.major = FALSE,
                                gridlines.minor = FALSE,
                                ) + 
  ggtitle("Young Vehicle vs Aged Vehicle \nDifferential Expression") + 
  theme_prism(base_size = 10) + 
  theme(legend.position = "none")

# AMAV
keyvals_amav <- ifelse(
    dge_results[["Endothelial"]]$mast_amav$p_val_adj < .05 &        dge_results[["Endothelial"]]$mast_amav$avg_log2FC < -.5, '#FB61D7',
      ifelse(dge_results[["Endothelial"]]$mast_amav$p_val_adj < .05 &        dge_results[["Endothelial"]]$mast_amav$avg_log2FC > .5, '#FB61D7',
        'gray'))
  keyvals_amav[is.na(keyvals_amav)] <- 'gray'
  names(keyvals_amav)[keyvals_amav == '#FB61D7'] <- 'differentially expressed gene (p-adjusted < 0.05)'


volcano_amav <- EnhancedVolcano(dge_results[["Endothelial"]]$mast_amav,
                                lab = rownames(dge_results[["Endothelial"]]$mast_amav),
                                x = "avg_log2FC",
                                y = "p_val",
                                boxedLabels = TRUE,
                                drawConnectors = TRUE,
                                FCcutoff = 0.5,
                                pCutoff = 0.05,
                                pCutoffCol = "p_val_adj",
                                colCustom = keyvals_amav,
                                xlim = c(-4,4),
                                ylim = c(0,5),
                                subtitle = NULL,
                                gridlines.major = FALSE,
                                gridlines.minor = FALSE,
                                ) + 
  ggtitle("Aged M Vaccae vs Aged Vehicle \nDifferential Expression") + 
  theme_prism(base_size = 10) + 
  theme(legend.position = "bottom")

# Figure 2 Creation---
free(volcano_yvav + volcano_amav) / (gse_yvav_graph + gse_amav_graph) / (yvav_kegg_graph + amav_kegg_graph) + plot_layout(height = c(2,2,2)) + plot_annotation(tag_levels = 'A') 

ggsave("/stor/work/Fonken/UT23_snRNAseq/local_ut23/Graphs/endo_ut23_volcanogsea.png", dpi = 300, width = 12, height = 15)
```
